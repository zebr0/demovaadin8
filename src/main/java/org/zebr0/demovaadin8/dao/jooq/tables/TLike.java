/*
 * This file is generated by jOOQ.
 */
package org.zebr0.demovaadin8.dao.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.zebr0.demovaadin8.dao.jooq.Demovaadin8;
import org.zebr0.demovaadin8.dao.jooq.Keys;
import org.zebr0.demovaadin8.dao.jooq.tables.records.TLikeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TLike extends TableImpl<TLikeRecord> {

    private static final long serialVersionUID = 1382208750;

    /**
     * The reference instance of <code>demovaadin8.t_like</code>
     */
    public static final TLike T_LIKE = new TLike();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TLikeRecord> getRecordType() {
        return TLikeRecord.class;
    }

    /**
     * The column <code>demovaadin8.t_like.timestamp</code>.
     */
    public final TableField<TLikeRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>demovaadin8.t_like</code> table reference
     */
    public TLike() {
        this(DSL.name("t_like"), null);
    }

    /**
     * Create an aliased <code>demovaadin8.t_like</code> table reference
     */
    public TLike(String alias) {
        this(DSL.name(alias), T_LIKE);
    }

    /**
     * Create an aliased <code>demovaadin8.t_like</code> table reference
     */
    public TLike(Name alias) {
        this(alias, T_LIKE);
    }

    private TLike(Name alias, Table<TLikeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TLike(Name alias, Table<TLikeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TLike(Table<O> child, ForeignKey<O, TLikeRecord> key) {
        super(child, key, T_LIKE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Demovaadin8.DEMOVAADIN8;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TLikeRecord> getPrimaryKey() {
        return Keys.T_LIKE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TLikeRecord>> getKeys() {
        return Arrays.<UniqueKey<TLikeRecord>>asList(Keys.T_LIKE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TLike as(String alias) {
        return new TLike(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TLike as(Name alias) {
        return new TLike(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TLike rename(String name) {
        return new TLike(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TLike rename(Name name) {
        return new TLike(name, null);
    }
}
